/*********************************************************************************/
/********** THIS FILE IS GENERATED BY TOUCHGFX DESIGNER, DO NOT MODIFY ***********/
/*********************************************************************************/
#include <new>
#include <gui_generated/common/FrontendApplicationBase.hpp>
#include <gui/common/FrontendHeap.hpp>
#include <touchgfx/transitions/NoTransition.hpp>
#include <texts/TextKeysAndLanguages.hpp>
#include <touchgfx/Texts.hpp>
#include <touchgfx/hal/HAL.hpp>
#include <platform/driver/lcd/LCD16bpp.hpp>
#include <gui/screenmenu_screen/ScreenMenuView.hpp>
#include <gui/screenmenu_screen/ScreenMenuPresenter.hpp>
#include <gui/screen1_screen/Screen1View.hpp>
#include <gui/screen1_screen/Screen1Presenter.hpp>
#include <gui/screenfan_screen/ScreenFanView.hpp>
#include <gui/screenfan_screen/ScreenFanPresenter.hpp>
#include <gui/screencurve_screen/ScreenCurveView.hpp>
#include <gui/screencurve_screen/ScreenCurvePresenter.hpp>
#include <gui/screeneffect_screen/ScreenEffectView.hpp>
#include <gui/screeneffect_screen/ScreenEffectPresenter.hpp>
#include <gui/screeneffectset_screen/ScreenEffectSetView.hpp>
#include <gui/screeneffectset_screen/ScreenEffectSetPresenter.hpp>
#include <gui/screencontrol_screen/ScreenControlView.hpp>
#include <gui/screencontrol_screen/ScreenControlPresenter.hpp>
#include <gui/screendmx_screen/ScreenDMXView.hpp>
#include <gui/screendmx_screen/ScreenDMXPresenter.hpp>
#include <gui/screenbluetooth_screen/ScreenBluetoothView.hpp>
#include <gui/screenbluetooth_screen/ScreenBluetoothPresenter.hpp>
#include <gui/screenlanguage_screen/ScreenLanguageView.hpp>
#include <gui/screenlanguage_screen/ScreenLanguagePresenter.hpp>
#include <gui/screenstudio_screen/ScreenStudioView.hpp>
#include <gui/screenstudio_screen/ScreenStudioPresenter.hpp>
#include <gui/screenupdate_screen/ScreenUpdateView.hpp>
#include <gui/screenupdate_screen/ScreenUpdatePresenter.hpp>

using namespace touchgfx;

FrontendApplicationBase::FrontendApplicationBase(Model& m, FrontendHeap& heap)
    : touchgfx::MVPApplication(),
      transitionCallback(),
      frontendHeap(heap),
      model(m)
{
    touchgfx::HAL::getInstance()->setDisplayOrientation(touchgfx::ORIENTATION_LANDSCAPE);
    touchgfx::Texts::setLanguage(GB);
    reinterpret_cast<touchgfx::LCD16bpp&>(touchgfx::HAL::lcd()).enableTextureMapperAll();
}

/*
 * Screen Transition Declarations
 */

// ScreenMenu

void FrontendApplicationBase::gotoScreenMenuScreenNoTransition()
{
    transitionCallback = touchgfx::Callback<FrontendApplicationBase>(this, &FrontendApplication::gotoScreenMenuScreenNoTransitionImpl);
    pendingScreenTransitionCallback = &transitionCallback;
}

void FrontendApplicationBase::gotoScreenMenuScreenNoTransitionImpl()
{
    touchgfx::makeTransition<ScreenMenuView, ScreenMenuPresenter, touchgfx::NoTransition, Model >(&currentScreen, &currentPresenter, frontendHeap, &currentTransition, &model);
}

// Screen1

void FrontendApplicationBase::gotoScreen1ScreenNoTransition()
{
    transitionCallback = touchgfx::Callback<FrontendApplicationBase>(this, &FrontendApplication::gotoScreen1ScreenNoTransitionImpl);
    pendingScreenTransitionCallback = &transitionCallback;
}

void FrontendApplicationBase::gotoScreen1ScreenNoTransitionImpl()
{
    touchgfx::makeTransition<Screen1View, Screen1Presenter, touchgfx::NoTransition, Model >(&currentScreen, &currentPresenter, frontendHeap, &currentTransition, &model);
}

// ScreenFan

void FrontendApplicationBase::gotoScreenFanScreenNoTransition()
{
    transitionCallback = touchgfx::Callback<FrontendApplicationBase>(this, &FrontendApplication::gotoScreenFanScreenNoTransitionImpl);
    pendingScreenTransitionCallback = &transitionCallback;
}

void FrontendApplicationBase::gotoScreenFanScreenNoTransitionImpl()
{
    touchgfx::makeTransition<ScreenFanView, ScreenFanPresenter, touchgfx::NoTransition, Model >(&currentScreen, &currentPresenter, frontendHeap, &currentTransition, &model);
}

// ScreenCurve

void FrontendApplicationBase::gotoScreenCurveScreenNoTransition()
{
    transitionCallback = touchgfx::Callback<FrontendApplicationBase>(this, &FrontendApplication::gotoScreenCurveScreenNoTransitionImpl);
    pendingScreenTransitionCallback = &transitionCallback;
}

void FrontendApplicationBase::gotoScreenCurveScreenNoTransitionImpl()
{
    touchgfx::makeTransition<ScreenCurveView, ScreenCurvePresenter, touchgfx::NoTransition, Model >(&currentScreen, &currentPresenter, frontendHeap, &currentTransition, &model);
}

// ScreenEffect

void FrontendApplicationBase::gotoScreenEffectScreenNoTransition()
{
    transitionCallback = touchgfx::Callback<FrontendApplicationBase>(this, &FrontendApplication::gotoScreenEffectScreenNoTransitionImpl);
    pendingScreenTransitionCallback = &transitionCallback;
}

void FrontendApplicationBase::gotoScreenEffectScreenNoTransitionImpl()
{
    touchgfx::makeTransition<ScreenEffectView, ScreenEffectPresenter, touchgfx::NoTransition, Model >(&currentScreen, &currentPresenter, frontendHeap, &currentTransition, &model);
}

// ScreenEffectSet

void FrontendApplicationBase::gotoScreenEffectSetScreenNoTransition()
{
    transitionCallback = touchgfx::Callback<FrontendApplicationBase>(this, &FrontendApplication::gotoScreenEffectSetScreenNoTransitionImpl);
    pendingScreenTransitionCallback = &transitionCallback;
}

void FrontendApplicationBase::gotoScreenEffectSetScreenNoTransitionImpl()
{
    touchgfx::makeTransition<ScreenEffectSetView, ScreenEffectSetPresenter, touchgfx::NoTransition, Model >(&currentScreen, &currentPresenter, frontendHeap, &currentTransition, &model);
}

// ScreenControl

void FrontendApplicationBase::gotoScreenControlScreenNoTransition()
{
    transitionCallback = touchgfx::Callback<FrontendApplicationBase>(this, &FrontendApplication::gotoScreenControlScreenNoTransitionImpl);
    pendingScreenTransitionCallback = &transitionCallback;
}

void FrontendApplicationBase::gotoScreenControlScreenNoTransitionImpl()
{
    touchgfx::makeTransition<ScreenControlView, ScreenControlPresenter, touchgfx::NoTransition, Model >(&currentScreen, &currentPresenter, frontendHeap, &currentTransition, &model);
}

// ScreenDMX

void FrontendApplicationBase::gotoScreenDMXScreenNoTransition()
{
    transitionCallback = touchgfx::Callback<FrontendApplicationBase>(this, &FrontendApplication::gotoScreenDMXScreenNoTransitionImpl);
    pendingScreenTransitionCallback = &transitionCallback;
}

void FrontendApplicationBase::gotoScreenDMXScreenNoTransitionImpl()
{
    touchgfx::makeTransition<ScreenDMXView, ScreenDMXPresenter, touchgfx::NoTransition, Model >(&currentScreen, &currentPresenter, frontendHeap, &currentTransition, &model);
}

// ScreenBluetooth

void FrontendApplicationBase::gotoScreenBluetoothScreenNoTransition()
{
    transitionCallback = touchgfx::Callback<FrontendApplicationBase>(this, &FrontendApplication::gotoScreenBluetoothScreenNoTransitionImpl);
    pendingScreenTransitionCallback = &transitionCallback;
}

void FrontendApplicationBase::gotoScreenBluetoothScreenNoTransitionImpl()
{
    touchgfx::makeTransition<ScreenBluetoothView, ScreenBluetoothPresenter, touchgfx::NoTransition, Model >(&currentScreen, &currentPresenter, frontendHeap, &currentTransition, &model);
}

// ScreenLanguage

void FrontendApplicationBase::gotoScreenLanguageScreenNoTransition()
{
    transitionCallback = touchgfx::Callback<FrontendApplicationBase>(this, &FrontendApplication::gotoScreenLanguageScreenNoTransitionImpl);
    pendingScreenTransitionCallback = &transitionCallback;
}

void FrontendApplicationBase::gotoScreenLanguageScreenNoTransitionImpl()
{
    touchgfx::makeTransition<ScreenLanguageView, ScreenLanguagePresenter, touchgfx::NoTransition, Model >(&currentScreen, &currentPresenter, frontendHeap, &currentTransition, &model);
}

// ScreenStudio

void FrontendApplicationBase::gotoScreenStudioScreenNoTransition()
{
    transitionCallback = touchgfx::Callback<FrontendApplicationBase>(this, &FrontendApplication::gotoScreenStudioScreenNoTransitionImpl);
    pendingScreenTransitionCallback = &transitionCallback;
}

void FrontendApplicationBase::gotoScreenStudioScreenNoTransitionImpl()
{
    touchgfx::makeTransition<ScreenStudioView, ScreenStudioPresenter, touchgfx::NoTransition, Model >(&currentScreen, &currentPresenter, frontendHeap, &currentTransition, &model);
}

// ScreenUpdate

void FrontendApplicationBase::gotoScreenUpdateScreenNoTransition()
{
    transitionCallback = touchgfx::Callback<FrontendApplicationBase>(this, &FrontendApplication::gotoScreenUpdateScreenNoTransitionImpl);
    pendingScreenTransitionCallback = &transitionCallback;
}

void FrontendApplicationBase::gotoScreenUpdateScreenNoTransitionImpl()
{
    touchgfx::makeTransition<ScreenUpdateView, ScreenUpdatePresenter, touchgfx::NoTransition, Model >(&currentScreen, &currentPresenter, frontendHeap, &currentTransition, &model);
}
